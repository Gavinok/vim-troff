*troff.txt*  A vim plugin to help modernize groff

Author:  Gavin Jaeger-Freeborn <gavinfreeborn@gmail.com>
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

INTRODUCTION 									*troff-introduction* *troff*

Whenever you edit a file with the extension .ms,.mom,.me,.mm,.tr,.troff,.tmac,
this plugin will be automatically activated.

NAVIGATION										*troff-navigation*

Navigating between macro files and troff files can often be tricky so be sure
to add your macro directory to your 'path'. By default
/usr/share/groff/current/tmac is appended to 'path' but you can set your own
macro directory 

												*g:troff-macro-dir*

Comma separated list of directories used for storing macros defaults to
/usr/share/groff/current/tmac if it exists.
>
	let g:troff_macro_dir=/usr/share/groff/current/tmac
<
|:find| can then locate a macro file for you.

For groff users you can also add your global macros by setting
|g:groff_install_prefix|

    	                                        *g:troff-include*

Settings for both 'include' and 'define' have been set for use with .so and
.mso so you can use |include-search| and |definition-search| to jump to
definitions with [<C-D> , [<C-I> , |:djump|,  |:ijump| use completion with
<C-X><C-D> or <C-X><C-I> and much more.

COMPLETION										*troff-completion*

vim-troff comes with an 'omnifunc' for somewhat intelligent completion. It
supports eqn, tbl, and pic, groff requests, and groff glyphs. In addition the
omnifunc will try to determine the current macros for additional completion.
by default the omnifunc is enabled. You can activate this completions with
<C-X><C-O> in insert mode.

TEXTOBJ	                                       *troff-text-objects*

vim-troff currently supports the following text objects:

                                               *troff-i-text-objects*
`if`
        between `\f` escape sequences e.g `\f. , \f(.. , and \f[...]`
`iF`
        between `\F` escape sequences e.g `\F. , \F(.. , and \F[...]`
`im`
        between `\m` escape sequences e.g `\m. , \m(.. , and \m[...]`
`iM`
        between `\M` escape sequences e.g `\M. , \M(.. , and \M[...]`

                                            *troff-a-text-objects*
`af`
        arround `\f` escape sequences e.g `\f. , \f(.. , and \f[...]`
`aF`
        arround `\F` escape sequences e.g `\F. , \F(.. , and \F[...]`
`am`
        arround `\m` escape sequences e.g `\m. , \m(.. , and \m[...]`
`aM`
        arround `\M` escape sequences e.g `\M. , \M(.. , and \M[...]`

SYNTAX											*troff-syntax*

vim-troff adds multiple additions to the syntax such as spell checking and
syntax folding for preprocessor sections.

NOTE: currently vim-troff assumes that your groff implementation allows for
more then 2 character macros and commands.

	                                           *troff-eqn-conceal*
vim-troff adds concealing similar to how |tex-conceal| works. To disable
eqn concealing set
>
    let g:troff_greek  = 0
    let g:troff_math   = 0
    let g:troff_subsup = 0
<
If you want to use a delimiter for inline eqn set |g:troff_eqndelim| to
your desired delimiter.

SETTINGS										*troff-settings*

Use the following settings to customize vim-trofff to your liking.

Available options: ~

    |g:groff_install_prefix|
    |g:troff_greek|
    |g:troff_math|
    |g:troff_subsup|
    |g:troff_eqndelim|
    |g:troff_macro_dir|
    |g:troff_text_obj_enabled|
    |g:troff_nospell_macros|

------------------------------------------------------------------------------
												*g:groff_install_prefix*
Default:
	let g:groff_install_prefix='/usr/share'~

This sets the prefix that vim-troff uses to look for macros to add to your
'path'
												*g:troff_greek*
Default:
	let g:troff_greek = 1~

Enables |conceal| of greek letters in eqn

												*g:troff_subsup*
Default:
	let g:troff_subsup = 1~

Enables |conceal| of subscripts and superscripts in eqn letters in eqn

												*g:troff_math*
Default:
	let g:troff_math = 1~

Enables |conceal| of math symbols such as `prod` is shown as `∏` and
superscripts in eqn letters in eqn

												*g:troff_eqndelim*
Default:
	By default g:troff_eqndelim is not set

Example:
	let g:troff_eqndelim = '@#'~

Enables |conceal| of math symbols between a delimiter in this example
`@prod#` is shown as `∏` if |g:troff_math| is enabled.

    NOTE: This does not follow `delim off`

												*g:troff_macro_dir*
Default:
	let g:troff_macro_dir='/usr/share/groff/current/tmac'~

Used for storing additional troff mactro directories superscripts in eqn
letters in eqn

												*g:troff_text_obj_enabled*
Default:
	let g:troff_text_obj_enabled = 1~

set to 0 to disable support for troff |text-objects|

												*g:troff_nospell_macros*
Default:
	let g:troff_nospell_macros = 1~

avoids spellchecking macros and troff requests.
eg
>
 .NH
 hllo world
<
if 'spell' and |g:troff_nospell_macros| are enabled then only `hllo`
will be highlighted. if |g:troff_nospell_macros| is disabled then `.NH` will
also be highlighted.

COMPATIBILITY									*troff-compatibly*

Currently vim-troff is focused on supporting groff and will slowly add
compatibility for alternative troff implementations.

                                               *troff-plugin-compatibility*
                                               *troff-matchit*
Additional settings are added to |matchit| to add support for jumping between
certain macros and the start and end of a preprocessor. 

                                               *troff-surround*
vim-troff also adds support for tpope's surround plugin using E for eqn, T for
tbl, P for pic, f for font, and \ as \[].

 vim:tw=78:et:ft=help:norl:
